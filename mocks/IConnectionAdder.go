// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	handler "ezproxy/handler"
	net "net"

	mock "github.com/stretchr/testify/mock"
)

// IConnectionAdder is an autogenerated mock type for the IConnectionAdder type
type IConnectionAdder struct {
	mock.Mock
}

// AddConnection provides a mock function with given fields: px
func (_m *IConnectionAdder) AddConnection(px handler.IProxy) (handler.IProxyContainer, error) {
	ret := _m.Called(px)

	if len(ret) == 0 {
		panic("no return value specified for AddConnection")
	}

	var r0 handler.IProxyContainer
	var r1 error
	if rf, ok := ret.Get(0).(func(handler.IProxy) (handler.IProxyContainer, error)); ok {
		return rf(px)
	}
	if rf, ok := ret.Get(0).(func(handler.IProxy) handler.IProxyContainer); ok {
		r0 = rf(px)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(handler.IProxyContainer)
		}
	}

	if rf, ok := ret.Get(1).(func(handler.IProxy) error); ok {
		r1 = rf(px)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMpxAddrs provides a mock function with given fields:
func (_m *IConnectionAdder) GetMpxAddrs() map[string]net.Addr {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMpxAddrs")
	}

	var r0 map[string]net.Addr
	if rf, ok := ret.Get(0).(func() map[string]net.Addr); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]net.Addr)
		}
	}

	return r0
}

// GetProxy provides a mock function with given fields: id
func (_m *IConnectionAdder) GetProxy(id int) (handler.IProxyContainer, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetProxy")
	}

	var r0 handler.IProxyContainer
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (handler.IProxyContainer, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) handler.IProxyContainer); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(handler.IProxyContainer)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProxyAddr provides a mock function with given fields: mpx
func (_m *IConnectionAdder) GetProxyAddr(mpx string) (net.Addr, error) {
	ret := _m.Called(mpx)

	if len(ret) == 0 {
		panic("no return value specified for GetProxyAddr")
	}

	var r0 net.Addr
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (net.Addr, error)); ok {
		return rf(mpx)
	}
	if rf, ok := ret.Get(0).(func(string) net.Addr); ok {
		r0 = rf(mpx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(net.Addr)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(mpx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServerAddr provides a mock function with given fields:
func (_m *IConnectionAdder) GetServerAddr() net.Addr {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetServerAddr")
	}

	var r0 net.Addr
	if rf, ok := ret.Get(0).(func() net.Addr); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(net.Addr)
		}
	}

	return r0
}

// NewIConnectionAdder creates a new instance of IConnectionAdder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIConnectionAdder(t interface {
	mock.TestingT
	Cleanup(func())
}) *IConnectionAdder {
	mock := &IConnectionAdder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
