// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	context "context"
	handler "ezproxy/handler"

	mock "github.com/stretchr/testify/mock"

	net "net"
)

// IProxy is an autogenerated mock type for the IProxy type
type IProxy struct {
	mock.Mock
}

// GetClientAddr provides a mock function with given fields:
func (_m *IProxy) GetClientAddr() net.Addr {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetClientAddr")
	}

	var r0 net.Addr
	if rf, ok := ret.Get(0).(func() net.Addr); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(net.Addr)
		}
	}

	return r0
}

// Init provides a mock function with given fields: pktChan, ctx, cancel
func (_m *IProxy) Init(pktChan chan<- handler.ProxyPacketData, ctx context.Context, cancel context.CancelCauseFunc) error {
	ret := _m.Called(pktChan, ctx, cancel)

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(chan<- handler.ProxyPacketData, context.Context, context.CancelCauseFunc) error); ok {
		r0 = rf(pktChan, ctx, cancel)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Network provides a mock function with given fields:
func (_m *IProxy) Network() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Network")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SendToClient provides a mock function with given fields: data
func (_m *IProxy) SendToClient(data []byte) error {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for SendToClient")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendToServer provides a mock function with given fields: data
func (_m *IProxy) SendToServer(data []byte) error {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for SendToServer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIProxy creates a new instance of IProxy. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIProxy(t interface {
	mock.TestingT
	Cleanup(func())
}) *IProxy {
	mock := &IProxy{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
