// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	handler "ezproxy/handler"

	mock "github.com/stretchr/testify/mock"
)

// PacketSendCallback is an autogenerated mock type for the PacketSendCallback type
type PacketSendCallback struct {
	mock.Mock
}

// Execute provides a mock function with given fields: data, flags, proxy
func (_m *PacketSendCallback) Execute(data []byte, flags handler.CapFlags, proxy handler.IProxyContainer) bool {
	ret := _m.Called(data, flags, proxy)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func([]byte, handler.CapFlags, handler.IProxyContainer) bool); ok {
		r0 = rf(data, flags, proxy)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewPacketSendCallback creates a new instance of PacketSendCallback. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPacketSendCallback(t interface {
	mock.TestingT
	Cleanup(func())
}) *PacketSendCallback {
	mock := &PacketSendCallback{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
