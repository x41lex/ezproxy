// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	context "context"
	handler "ezproxy/handler"

	mock "github.com/stretchr/testify/mock"

	net "net"
)

// IProxySpawner is an autogenerated mock type for the IProxySpawner type
type IProxySpawner struct {
	mock.Mock
}

// AddConnection provides a mock function with given fields: px
func (_m *IProxySpawner) AddConnection(px handler.IProxy) (handler.IProxyContainer, error) {
	ret := _m.Called(px)

	if len(ret) == 0 {
		panic("no return value specified for AddConnection")
	}

	var r0 handler.IProxyContainer
	var r1 error
	if rf, ok := ret.Get(0).(func(handler.IProxy) (handler.IProxyContainer, error)); ok {
		return rf(px)
	}
	if rf, ok := ret.Get(0).(func(handler.IProxy) handler.IProxyContainer); ok {
		r0 = rf(px)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(handler.IProxyContainer)
		}
	}

	if rf, ok := ret.Get(1).(func(handler.IProxy) error); ok {
		r1 = rf(px)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Close provides a mock function with given fields:
func (_m *IProxySpawner) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CloseProxy provides a mock function with given fields: id
func (_m *IProxySpawner) CloseProxy(id int) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for CloseProxy")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllProxies provides a mock function with given fields:
func (_m *IProxySpawner) GetAllProxies() []handler.IProxyContainer {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllProxies")
	}

	var r0 []handler.IProxyContainer
	if rf, ok := ret.Get(0).(func() []handler.IProxyContainer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]handler.IProxyContainer)
		}
	}

	return r0
}

// GetBytesSent provides a mock function with given fields:
func (_m *IProxySpawner) GetBytesSent() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBytesSent")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// GetContext provides a mock function with given fields:
func (_m *IProxySpawner) GetContext() context.Context {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetContext")
	}

	var r0 context.Context
	if rf, ok := ret.Get(0).(func() context.Context); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// GetMpxAddrs provides a mock function with given fields:
func (_m *IProxySpawner) GetMpxAddrs() map[string]net.Addr {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMpxAddrs")
	}

	var r0 map[string]net.Addr
	if rf, ok := ret.Get(0).(func() map[string]net.Addr); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]net.Addr)
		}
	}

	return r0
}

// GetProxy provides a mock function with given fields: id
func (_m *IProxySpawner) GetProxy(id int) (handler.IProxyContainer, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetProxy")
	}

	var r0 handler.IProxyContainer
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (handler.IProxyContainer, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) handler.IProxyContainer); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(handler.IProxyContainer)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProxyAddr provides a mock function with given fields: mpx
func (_m *IProxySpawner) GetProxyAddr(mpx string) (net.Addr, error) {
	ret := _m.Called(mpx)

	if len(ret) == 0 {
		panic("no return value specified for GetProxyAddr")
	}

	var r0 net.Addr
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (net.Addr, error)); ok {
		return rf(mpx)
	}
	if rf, ok := ret.Get(0).(func(string) net.Addr); ok {
		r0 = rf(mpx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(net.Addr)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(mpx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecvChan provides a mock function with given fields: ctx
func (_m *IProxySpawner) GetRecvChan(ctx context.Context) (<-chan handler.PacketChanData, context.Context, context.CancelFunc) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetRecvChan")
	}

	var r0 <-chan handler.PacketChanData
	var r1 context.Context
	var r2 context.CancelFunc
	if rf, ok := ret.Get(0).(func(context.Context) (<-chan handler.PacketChanData, context.Context, context.CancelFunc)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) <-chan handler.PacketChanData); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan handler.PacketChanData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) context.Context); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(context.Context)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context) context.CancelFunc); ok {
		r2 = rf(ctx)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(context.CancelFunc)
		}
	}

	return r0, r1, r2
}

// GetServerAddr provides a mock function with given fields:
func (_m *IProxySpawner) GetServerAddr() net.Addr {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetServerAddr")
	}

	var r0 net.Addr
	if rf, ok := ret.Get(0).(func() net.Addr); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(net.Addr)
		}
	}

	return r0
}

// HandleError provides a mock function with given fields: err, pc
func (_m *IProxySpawner) HandleError(err error, pc handler.IProxyContainer) {
	_m.Called(err, pc)
}

// HandleSend provides a mock function with given fields: data, flags, proxy
func (_m *IProxySpawner) HandleSend(data []byte, flags handler.CapFlags, proxy handler.IProxyContainer) bool {
	ret := _m.Called(data, flags, proxy)

	if len(ret) == 0 {
		panic("no return value specified for HandleSend")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func([]byte, handler.CapFlags, handler.IProxyContainer) bool); ok {
		r0 = rf(data, flags, proxy)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsAlive provides a mock function with given fields:
func (_m *IProxySpawner) IsAlive() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsAlive")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// RegisterMpx provides a mock function with given fields: mpxName, protocol, address, listener
func (_m *IProxySpawner) RegisterMpx(mpxName string, protocol handler.PxProto, address net.Addr, listener handler.IProxyListener) error {
	ret := _m.Called(mpxName, protocol, address, listener)

	if len(ret) == 0 {
		panic("no return value specified for RegisterMpx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, handler.PxProto, net.Addr, handler.IProxyListener) error); ok {
		r0 = rf(mpxName, protocol, address, listener)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendToAllClients provides a mock function with given fields: data
func (_m *IProxySpawner) SendToAllClients(data []byte) error {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for SendToAllClients")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendToAllServers provides a mock function with given fields: data
func (_m *IProxySpawner) SendToAllServers(data []byte) error {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for SendToAllServers")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetErrorCallback provides a mock function with given fields: cb
func (_m *IProxySpawner) SetErrorCallback(cb handler.ProxyErrorCallback) {
	_m.Called(cb)
}

// TrySetFilterCallback provides a mock function with given fields: cb, ctx
func (_m *IProxySpawner) TrySetFilterCallback(cb handler.PacketSendCallback, ctx context.Context) error {
	ret := _m.Called(cb, ctx)

	if len(ret) == 0 {
		panic("no return value specified for TrySetFilterCallback")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(handler.PacketSendCallback, context.Context) error); ok {
		r0 = rf(cb, ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIProxySpawner creates a new instance of IProxySpawner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIProxySpawner(t interface {
	mock.TestingT
	Cleanup(func())
}) *IProxySpawner {
	mock := &IProxySpawner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
